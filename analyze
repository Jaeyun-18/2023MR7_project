import cv2
import mediapipe as mp
import numpy as np
mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose
cap  = cv2.VideoCapture(0)
cap2 = cv2.VideoCapture(1)

def calculate_sh_joint_1(basic_len,a,b,c,d):
    a = np.array(a) #left shoulder /frontcame
    b = np.array(b) #left elbow / frontcame
    c = np.array(c) #left shoulder / sidecame
    d = np.array(d) #left elbow / sidecame

    #point가 겹치는 것 예외 처리 1. len3이 너무 작으면 90 or 270 / 2. len1이 너무 작으면 len2를 basic_len로 고정

    len3 = np.abs(a[1]-b[1])
    len1 = np.abs(a[0]-b[0])
    len2 = np.sqrt(np.power(len1,2)+np.power(basic_len,2))
    radian = np.arccos(len2/len3)
    angle = np.abs(radian*180.0/np.pi)

    if b[1] > a[1]: #어깨보다 전방에
        if d[0] < c[0]:
            final_angle = angle
        else:
            final_angle = 360.0-angle

    else: #어깨보다 후방에
        if d[0] < c[0]:
            final_angle = 180.0-angle        
        else:
            final_angle = 180.0+angle
    
    return final_angle

## Setup mediapipe instance
# 얼마의 정확도로 추정할지 선정
with mp_pose.Pose(min_detection_confidence = 0.5, min_tracking_confidence = 0.5) as pose:
    while cap.isOpened() and cap2.isOpened():
        ret, frame = cap.read()
        ret2, frame2 = cap2.read()
        
        # Detect stuff and render\
        # Recolor image to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
        image2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2RGB)
        image2.flags.writeable = False
        
        # Make detection
        results = pose.process(image)
        results2 = pose.process(image2)
        
        # Recolor image to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image2.flags.writeable = True
        image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
        
        # Extract landmarks
        try:
            landmarks = results.pose_landmarks.landmark
            landmarks2 = results2.pose_landmarks.landmark
            
            # Get coordinates
            left_shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
            right_shoulder = [landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].x,landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y]
            left_elbow = [landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]
            left_wrist = [landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x,landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y]
            left_hip = [landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].x,landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].y]
            
            left_shoulder2 = [landmarks2[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,landmarks2[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
            right_shoulder2 = [landmarks2[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].x,landmarks2[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y]
            left_elbow2 = [landmarks2[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,landmarks2[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]
            left_wrist2 = [landmarks2[mp_pose.PoseLandmark.LEFT_WRIST.value].x,landmarks2[mp_pose.PoseLandmark.LEFT_WRIST.value].y]
            left_hip2 = [landmarks2[mp_pose.PoseLandmark.LEFT_HIP.value].x,landmarks2[mp_pose.PoseLandmark.LEFT_HIP.value].y]
            # Calculate angle
            angle1 = calculate_rotate(left_shoulder2, left_elbow2) #어께모터 360도 회전

            len_shoulder = np.abs(left_shoulder-right_shoulder) #정면 카메라를 통해 본 어깨 포인트 사이의 거리
            len_elbow = np.abs(left_elbow-left_shoulder) #정면 카메라를 통해 본 팔꿈치 포인트와 어깨 포인트 사이의 거리
            angle2 = calculate_angle2(len_shoulder, len_elbow, left_shoulder2, left_elbow2) #어깨모터 180도 회전

            #Visualize angle on frame
            # front
            cv2.putText(image, str(angle1),
                        tuple(np.multiply(left_shoulder, [640, 480]).astype(int)),
                        cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 255, 255), 2, cv2.LINE_AA
                        )
            
            # side
            cv2.putText(image2, str(angle2),
                        tuple(np.multiply(left_shoulder2, [640, 480]).astype(int)),
                        cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 255, 255), 2, cv2.LINE_AA
                        )

        except:
            pass
        
        # Render detections
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                 mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2),
                                 # joint 크기 및 색깔 설정
                                 mp_drawing.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2)
                                 # connection(bone) 크기 및 색깔 설정
                                 )
        mp_drawing.draw_landmarks(image2, results2.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                 mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=2),
                                 # joint 크기 및 색깔 설정
                                 mp_drawing.DrawingSpec(color=(245,66,230), thickness=2, circle_radius=2)
                                 # connection(bone) 크기 및 색깔 설정
                                 )
        
        cv2.imshow("Mediapipe Video(front)", image)
        cv2.imshow("Mediapipe Video(side)",image2)

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

    cap.release()
    cap2.release()
    cv2.destroyAllWindows()
